name: Build & Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build (${{ matrix.os }}, ${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            arch: x86_64
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-22.04
            arch: arm64
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
          - os: macos-latest
            arch: arm64
            target: aarch64-apple-darwin
          - os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            arch: arm64
            target: aarch64-pc-windows-msvc
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Add target triple
        run: rustup target add ${{ matrix.target }}

      # Linux（Ubuntu-22.04）で aarch64 ターゲットの場合、apt ソースを ports 系に上書きして必要なパッケージをインストール
      - name: Setup cross-compilation for aarch64 (Linux)
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && runner.os == 'Linux' }}
        run: |
          sudo dpkg --add-architecture arm64
          sudo bash -c 'cat > /etc/apt/sources.list' <<EOF
          deb [arch=amd64,arm64] http://ports.ubuntu.com/ubuntu-ports jammy main restricted universe multiverse
          deb [arch=amd64,arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted universe multiverse
          deb [arch=amd64,arm64] http://ports.ubuntu.com/ubuntu-ports-security jammy-security main restricted universe multiverse
          deb [arch=amd64,arm64] http://ports.ubuntu.com/ubuntu-ports jammy-backports main restricted universe multiverse
          EOF
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu libdbus-1-dev:arm64 pkg-config
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact
        shell: bash
        run: |
          mkdir artifact
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/wxbeacon2http.exe artifact/wxbeacon2http-${{ matrix.os }}-${{ matrix.arch }}.exe
          else
            cp target/${{ matrix.target }}/release/wxbeacon2http artifact/wxbeacon2http-${{ matrix.os }}-${{ matrix.arch }}
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: wxbeacon2http-${{ matrix.os }}-${{ matrix.arch }}
          path: artifact/

  release:
    name: Create GitHub Release
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Flatten downloaded artifacts
        run: |
          mkdir combined
          find release-artifacts -type f -exec cp {} combined/ \;
          echo "Combined files:"
          ls -l combined

      - name: Create GitHub Release with auto-generated release notes
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.sha }}
          name: Release ${{ github.sha }}
          generate_release_notes: true
          draft: false
          prerelease: false
          assets: combined/*
